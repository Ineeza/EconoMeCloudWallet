version: 2
jobs:
  build:
    docker:
      # https://hub.docker.com/_/node/
      - image: node:8.15.1-alpine
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install packages for restore_cache
          command: apk --no-cache add ca-certificates
      - restore_cache:
          keys:
            - cache-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install packages for build application
          command: apk --no-cache add bash build-base git lcms2-dev libpng-dev python
      - run:
          name: Print component version
          command: |
            node --version
            npm --version
            yarn --version
      - run:
          name: Install node modules
          command: yarn
      - run:
          name: Build application
          command: |
            case "$CIRCLE_BRANCH" in
            develop)
              export ECW_ENV=dev
              ;;
            stage)
              export ECW_ENV=stg
              ;;
            master)
              export ECW_ENV=prd
              ;;
            *)
              export ECW_ENV=lcl
              ;;
            esac
            echo "Building application on ECW_ENV=$ECW_ENV"
            yarn build
      - save_cache:
          key: cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - node_modules
            - ~/.npm
            - frontend/.next

  test:
    docker:
      - image: node:8.15.1-alpine
        environment:
          ECW_ENV: test
        # https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/postgres/images
      - image: circleci/postgres:10.5-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test_econome
    working_directory: ~/app
    steps:
      - setup_remote_docker:
         docker_layer_caching: true
      - checkout
      - run:
          name: Install packages for restore_cache
          command: apk --no-cache add ca-certificates
      - restore_cache:
          keys:
            - cache-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install packages for postgres
          command: apk --no-cache add bash git postgresql
      - run:
          name: Wait for postgresql
          command: ./.circleci/wait-for-it.sh localhost:5432
      - run:
          name: Create db schema
          command: |
            psql -h localhost -U postgres test_econome < db/V1__Init.sql
      - run:
          name: Install packages for flow
          command: |
            apk --no-cache add wget ncurses
            wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
            wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
            apk add glibc-2.28-r0.apk
      - run:
          name: Check flow types
          command: |
            yarn global add flow-typed
            yarn flow
      - run:
          name: Test
          command: yarn test -- --ci --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  build_container_on_dev:
    docker:
      - image: docker:stable-git
    environment:
      ECW_ENV: dev
      ECW_INFRA_BRANCH: master
      ECW_APP_VERSION: 8.15.1
    working_directory: ~/app
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - cache-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install packages for build container
          command: |
            apk --no-cache add make py-pip curl docker
            pip install awscli
      - run:
          name: Build container
          command: |
            git clone https://$GITHUB_USER:$GITHUB_TOKEN@$GITHUB_REPO_INFRA ~/infra
            cd ~/infra
            git checkout $ECW_INFRA_BRANCH
            cp -r ~/app ./aws/ecs/app/ecw-app
            cp -r ~/app ./aws/ecs/web/ecw-app
            cd aws/ecs

            if [ -n "$CIRCLE_TAG" ]; then
              export ECW_APP_TAG=$CIRCLE_TAG
            fi

            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_ECR
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_ECR
            if [ -n "$CIRCLE_TAG" ]; then
                ECW_APP=app ECW_APP_TAG=$CIRCLE_TAG ECW_APP_VERSION=$ECW_APP_VERSION make build
            else
                ECW_APP=app ECW_APP_TAG=latest ECW_APP_VERSION=$ECW_APP_VERSION make build
            fi

            cd ~/app
            commit=$(git rev-parse HEAD)
            text=":github: <https://$GITHUB_REPO_APP/commit/$commit|Commit URL - $commit>"
            ./.circleci/post-slack.sh "Build successfully on $CIRCLE_BRANCH" "$text"
      - persist_to_workspace:
          root: ~/infra
          paths:
            - .

  deploy_on_dev:
    docker:
      - image: circleci/python
    environment:
      ECW_ENV: dev
      ECW_INFRA_BRANCH: master
    working_directory: ~/app
    steps:
      - checkout
      - attach_workspace:
          at: ~/infra
      - run:
          name: Install packages for deploy container
          command: |
            sudo pip install awscli
      - run:
          name: Deploy application container
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_DEPLOY
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_DEPLOY

            cd ~/infra/aws/ecs
            ECW_APP=app ECW_APP_TAG=latest make deploy

            cd ~/app
            commit=$(git rev-parse HEAD)
            text=":github: <https://$GITHUB_REPO_APP/commit/$commit|Commit URL - $commit>"
            .circleci/post-slack.sh "Deploy successfully on $CIRCLE_BRANCH" "$text"

workflows:
  version: 2
  build-test-and-only-dev-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - build_container_on_dev:
          requires:
            - test
          filters:
            branches:
              only: develop
      - deploy_on_dev:
          requires:
            - build_container_on_dev
          filters:
            branches:
              only: develop
